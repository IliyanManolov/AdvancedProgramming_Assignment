// <auto-generated />
using System;
using IMDB.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMDB.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250330105842_ManyToManyRelationshipsFix")]
    partial class ManyToManyRelationshipsFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<long>("ActorId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie", "imdb");
                });

            modelBuilder.Entity("ActorTvShow", b =>
                {
                    b.Property<long>("ActorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.HasKey("ActorId", "TvShowId");

                    b.HasIndex("TvShowId");

                    b.ToTable("ActorTvShow", "imdb");
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.Property<long>("DirectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("DirectorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("DirectorMovie", "imdb");
                });

            modelBuilder.Entity("DirectorTvShow", b =>
                {
                    b.Property<long>("DirectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.HasKey("DirectorId", "TvShowId");

                    b.HasIndex("TvShowId");

                    b.ToTable("DirectorTvShow", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Actor", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("biography");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_birth");

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_death");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nationality");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("profile_image");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("actors", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Director", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("biography");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_birth");

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_death");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nationality");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("profile_image");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("directors", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Genre", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genre_name");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("genres", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Movie", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long>("Length")
                        .HasColumnType("bigint")
                        .HasColumnName("length_seconds");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("poster_image");

                    b.Property<double?>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date");

                    b.Property<long?>("Reviews")
                        .HasColumnType("bigint")
                        .HasColumnName("reviews");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("trailer_url");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("movies", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.ShowEpisode", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateAired")
                        .HasColumnType("datetime2")
                        .HasColumnName("aired_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long?>("Length")
                        .HasColumnType("bigint")
                        .HasColumnName("length_seconds");

                    b.Property<double?>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<long?>("Reviews")
                        .HasColumnType("bigint")
                        .HasColumnName("reviews_count");

                    b.Property<int?>("SeasonNumber")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("season_number");

                    b.Property<long?>("ShowId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ShowId");

                    b.ToTable("showEpisodes", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.TvShow", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("poster_image");

                    b.Property<double?>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date");

                    b.Property<long?>("Reviews")
                        .HasColumnType("bigint")
                        .HasColumnName("reviews");

                    b.Property<int?>("Seasons")
                        .HasColumnType("int")
                        .HasColumnName("seasons");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("tv_shows", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.Property<long?>("WatchListId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WatchListId")
                        .IsUnique()
                        .HasFilter("[WatchListId] IS NOT NULL");

                    b.ToTable("users", "imdb");
                });

            modelBuilder.Entity("IMDB.Domain.Models.WatchList", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("watch_lists", "imdb");
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre", "imdb");
                });

            modelBuilder.Entity("TvShowGenre", b =>
                {
                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.HasKey("GenreId", "TvShowId");

                    b.HasIndex("TvShowId");

                    b.ToTable("TvShowGenre", "imdb");
                });

            modelBuilder.Entity("WatchlistMovie", b =>
                {
                    b.Property<long>("WatchlistId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("WatchlistId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchlistMovie", "imdb");
                });

            modelBuilder.Entity("WatchlistTvShow", b =>
                {
                    b.Property<long>("WatchlistId")
                        .HasColumnType("bigint");

                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.HasKey("WatchlistId", "TvShowId");

                    b.HasIndex("TvShowId");

                    b.ToTable("WatchlistTvShow", "imdb");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ActorTvShow", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorTvShow", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IMDB.Domain.Models.Actor", b =>
                {
                    b.HasOne("IMDB.Domain.Models.User", "CreatedByUser")
                        .WithMany("CreatedActors")
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Director", b =>
                {
                    b.HasOne("IMDB.Domain.Models.User", "CreatedByUser")
                        .WithMany("CreatedDirectors")
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Genre", b =>
                {
                    b.HasOne("IMDB.Domain.Models.User", "CreatedByUser")
                        .WithMany("CreatedGenres")
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("IMDB.Domain.Models.Movie", b =>
                {
                    b.HasOne("IMDB.Domain.Models.User", "CreatedByUser")
                        .WithMany("CreatedMovies")
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("IMDB.Domain.Models.ShowEpisode", b =>
                {
                    b.HasOne("IMDB.Domain.Models.User", "CreatedByUser")
                        .WithMany("CreatedEpisodes")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IMDB.Domain.Models.TvShow", "Show")
                        .WithMany("Episodes")
                        .HasForeignKey("ShowId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("IMDB.Domain.Models.TvShow", b =>
                {
                    b.HasOne("IMDB.Domain.Models.User", "CreatedByUser")
                        .WithMany("CreatedShows")
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("IMDB.Domain.Models.User", b =>
                {
                    b.HasOne("IMDB.Domain.Models.WatchList", "WatchList")
                        .WithOne("User")
                        .HasForeignKey("IMDB.Domain.Models.User", "WatchListId");

                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TvShowGenre", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchlistMovie", b =>
                {
                    b.HasOne("IMDB.Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.WatchList", null)
                        .WithMany()
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchlistTvShow", b =>
                {
                    b.HasOne("IMDB.Domain.Models.TvShow", null)
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDB.Domain.Models.WatchList", null)
                        .WithMany()
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IMDB.Domain.Models.TvShow", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("IMDB.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedActors");

                    b.Navigation("CreatedDirectors");

                    b.Navigation("CreatedEpisodes");

                    b.Navigation("CreatedGenres");

                    b.Navigation("CreatedMovies");

                    b.Navigation("CreatedShows");
                });

            modelBuilder.Entity("IMDB.Domain.Models.WatchList", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
